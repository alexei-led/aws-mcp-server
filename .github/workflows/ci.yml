name: PR Validation

on:
  pull_request:
    paths-ignore:
      - 'deploy/**'
      - '*.md'

jobs:
  test:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install uv
        run: |
          # Install uv using the official installation method
          curl -LsSf https://astral.sh/uv/install.sh | sh

          # Add uv to PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies using uv
        run: |
          # Install dependencies using uv with the lock file and the --system flag
          uv pip install --system -e ".[dev]"

      - name: Lint
        run: make lint
        continue-on-error: true  # Display errors but don't fail build for lint warnings

      - name: Test
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Install setuptools_scm
        run: pip install setuptools_scm
        
      - name: Generate version file and get version info
        id: version
        run: |
          # Generate version file automatically
          python -m setuptools_scm
          
          # Get the raw version from setuptools_scm
          VERSION=$(python -m setuptools_scm)
          
          # Make version Docker-compatible (replace + with -)
          DOCKER_VERSION=$(echo "$VERSION" | tr '+' '-')
          
          echo "version=$DOCKER_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          push: false
          tags: aws-mcp-server:${{ steps.version.outputs.version }}
          platforms: linux/amd64
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
